// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"github.com/jackc/pgx/v5/pgtype"
)

type Alert struct {
	ID                 int64              `json:"id"`
	PlateID            int64              `json:"plateID"`
	HotlistID          int64              `json:"hotlistID"`
	CreatedAt          pgtype.Timestamptz `json:"createdAt"`
	Status             interface{}        `json:"status"`
	Attempts           int32              `json:"attempts"`
	LastError          pgtype.Text        `json:"lastError"`
	LockedAt           pgtype.Timestamptz `json:"lockedAt"`
	LockedBy           pgtype.Text        `json:"lockedBy"`
	ProcessingDeadline pgtype.Timestamptz `json:"processingDeadline"`
	VisibleAt          pgtype.Timestamptz `json:"visibleAt"`
}

type Alpr struct {
	ID         int64            `json:"id"`
	Doc        []byte           `json:"doc"`
	InsertedAt pgtype.Timestamp `json:"insertedAt"`
	PlateNum   pgtype.Text      `json:"plateNum"`
	// the time that the alpr system read the plate from a camera
	ReadTime   pgtype.Timestamp `json:"readTime"`
	CameraName pgtype.Text      `json:"cameraName"`
	PlateCode  pgtype.Text      `json:"plateCode"`
	// used to build url to direct image access from S3
	ImageID  pgtype.Text `json:"imageID"`
	Location interface{} `json:"location"`
	// unique id of the read scan
	ReadID pgtype.Text `json:"readID"`
	Make   pgtype.Text `json:"make"`
	// sedan, suv, etc
	VehicleType pgtype.Text `json:"vehicleType"`
	Color       pgtype.Text `json:"color"`
}

type AlprDeadletter struct {
	ID       int64              `json:"id"`
	FailedAt pgtype.Timestamptz `json:"failedAt"`
	Stage    string             `json:"stage"`
	Sqlstate pgtype.Text        `json:"sqlstate"`
	Message  pgtype.Text        `json:"message"`
	Detail   pgtype.Text        `json:"detail"`
	Hint     pgtype.Text        `json:"hint"`
	Context  pgtype.Text        `json:"context"`
	Doc      []byte             `json:"doc"`
}

type AlprIngest struct {
	ID          int64              `json:"id"`
	Doc         []byte             `json:"doc"`
	PlateNum    pgtype.Text        `json:"plateNum"`
	ReadTime    pgtype.Timestamptz `json:"readTime"`
	CameraName  pgtype.Text        `json:"cameraName"`
	PlateCode   pgtype.Text        `json:"plateCode"`
	ImageID     pgtype.Text        `json:"imageID"`
	Location    interface{}        `json:"location"`
	ReadID      pgtype.Text        `json:"readID"`
	Make        pgtype.Text        `json:"make"`
	VehicleType pgtype.Text        `json:"vehicleType"`
	Color       pgtype.Text        `json:"color"`
	InsertedAt  pgtype.Timestamptz `json:"insertedAt"`
}

type Hotlist struct {
	ID                    int64              `json:"id"`
	HotlistID             string             `json:"hotlistID"`
	Status                string             `json:"status"`
	StartDate             pgtype.Timestamptz `json:"startDate"`
	ExpirationDate        pgtype.Timestamptz `json:"expirationDate"`
	ReasonType            pgtype.Text        `json:"reasonType"`
	PlateNumber           string             `json:"plateNumber"`
	NjsnapHitNotification pgtype.Bool        `json:"njsnapHitNotification"`
	Doc                   []byte             `json:"doc"`
	CreatedAt             pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt             pgtype.Timestamptz `json:"updatedAt"`
}

type HotlistAlertEvent struct {
	ID        int64              `json:"id"`
	Kind      string             `json:"kind"`
	CreatedAt pgtype.Timestamptz `json:"createdAt"`
	Details   []byte             `json:"details"`
}

type HotlistAlertState struct {
	ID                   int32              `json:"id"`
	Mode                 interface{}        `json:"mode"`
	PhaseAttempts        int32              `json:"phaseAttempts"`
	FirstFailedAt        pgtype.Timestamptz `json:"firstFailedAt"`
	VendorDownNotifiedAt pgtype.Timestamptz `json:"vendorDownNotifiedAt"`
	NextDueAt            pgtype.Timestamptz `json:"nextDueAt"`
}
